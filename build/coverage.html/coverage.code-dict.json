{"/home/travis/build/kaizhu256/node-swgg-itunes-search/test.js":"/* istanbul instrument in package swgg_itunes_search */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        (function () {\n            try {\n                local.modeJs = typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            } catch (ignore) {\n            }\n            local.modeJs = local.modeJs || 'browser';\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('./assets.utility2.rollup.js')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-itunes-search/lib.swgg_itunes_search.js":"/* istanbul instrument in package swgg_itunes_search */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    /* istanbul ignore next */\n    (function () {\n        // init debug_inline\n        (function () {\n            var consoleError, context, key;\n            context = (typeof window === \"object\" && window) || global;\n            key = \"debug_inline\".replace(\"_i\", \"I\");\n            if (context[key]) {\n                return;\n            }\n            consoleError = console.error;\n            context[key] = function (arg0) {\n            /*\n             * this function will both print arg0 to stderr and return it\n             */\n                // debug arguments\n                context[\"_\" + key + \"Arguments\"] = arguments;\n                consoleError(\"\\n\\n\" + key);\n                consoleError.apply(console, arguments);\n                consoleError(\"\\n\");\n                // return arg0 for inspection\n                return arg0;\n            };\n        }());\n        // init local\n        local = {};\n        // init modeJs\n        (function () {\n            try {\n                local.modeJs = typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            } catch (ignore) {\n            }\n            local.modeJs = local.modeJs || 'browser';\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.utility2_rollup ||\n            local.global.utility2_rollup_old || require('./assets.utility2.rollup.js') ||\n            local;\n        // init nop\n        local.nop = function () {\n        /*\n         * this function will do nothing\n         */\n            return;\n        };\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_swgg_itunes_search = local;\n        } else {\n            // require builtins\n            // local.assert = require('assert');\n            local.buffer = require('buffer');\n            local.child_process = require('child_process');\n            local.cluster = require('cluster');\n            local.console = require('console');\n            local.constants = require('constants');\n            local.crypto = require('crypto');\n            local.dgram = require('dgram');\n            local.dns = require('dns');\n            local.domain = require('domain');\n            local.events = require('events');\n            local.fs = require('fs');\n            local.http = require('http');\n            local.https = require('https');\n            local.module = require('module');\n            local.net = require('net');\n            local.os = require('os');\n            local.path = require('path');\n            local.process = require('process');\n            local.punycode = require('punycode');\n            local.querystring = require('querystring');\n            local.readline = require('readline');\n            local.repl = require('repl');\n            local.stream = require('stream');\n            local.string_decoder = require('string_decoder');\n            local.timers = require('timers');\n            local.tls = require('tls');\n            local.tty = require('tty');\n            local.url = require('url');\n            local.util = require('util');\n            local.v8 = require('v8');\n            local.vm = require('vm');\n            local.zlib = require('zlib');\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib main\n        local.local = local.swgg_itunes_search = local;\n\n\n\n        /* validateLineSortedReset */\n        return;\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-itunes-search/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of swgg-itunes-search\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install kaizhu256/node-swgg-itunes-search#alpha && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package swgg_itunes_search */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        (function () {\n            try {\n                local.modeJs = typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            } catch (ignore) {\n            }\n            local.modeJs = local.modeJs || 'browser';\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_swgg_itunes_search\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n        // init assets\n        local.assetsDict['/assets.index.template.html'] = local.assetsDict['/assets.swgg.html'];\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        // local.assert = require('assert');\n        local.buffer = require('buffer');\n        local.child_process = require('child_process');\n        local.cluster = require('cluster');\n        local.console = require('console');\n        local.constants = require('constants');\n        local.crypto = require('crypto');\n        local.dgram = require('dgram');\n        local.dns = require('dns');\n        local.domain = require('domain');\n        local.events = require('events');\n        local.fs = require('fs');\n        local.http = require('http');\n        local.https = require('https');\n        local.module = require('module');\n        local.net = require('net');\n        local.os = require('os');\n        local.path = require('path');\n        local.process = require('process');\n        local.punycode = require('punycode');\n        local.querystring = require('querystring');\n        local.readline = require('readline');\n        local.repl = require('repl');\n        local.stream = require('stream');\n        local.string_decoder = require('string_decoder');\n        local.timers = require('timers');\n        local.tls = require('tls');\n        local.tty = require('tty');\n        local.url = require('url');\n        local.util = require('util');\n        local.v8 = require('v8');\n        local.vm = require('vm');\n        local.zlib = require('zlib');\n        /* validateLineSortedReset */\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        [\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n        /* validateLineSortedReset */\n        /* jslint-ignore-begin */\n        // bug-workaround - long $npm_package_buildCustomOrg\n        local.assetsDict['/assets.swgg_itunes_search.js'] =\n            local.assetsDict['/assets.swgg_itunes_search.js'] ||\n            local.fs.readFileSync(local.__dirname + '/lib.swgg_itunes_search.js', 'utf8'\n        ).replace((/^#!\\//), '// ');\n        /* jslint-ignore-end */\n        /* validateLineSortedReset */\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'swgg-itunes-search';\n                case 'npm_package_nameLib':\n                    return 'swgg_itunes_search';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}